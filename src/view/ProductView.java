package view;import model.Product;import org.nocrala.tools.texttablefmt.BorderStyle;import org.nocrala.tools.texttablefmt.CellStyle;import org.nocrala.tools.texttablefmt.ShownBorders;import org.nocrala.tools.texttablefmt.Table;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;import java.util.Scanner;import java.util.regex.Pattern;import java.util.stream.Collectors;public class ProductView {    private Scanner scanner;    public ProductView() {        scanner = new Scanner(System.in);    }    private static String checkName(String prompt) {        Scanner scanName = new Scanner(System.in);        String enter;        Pattern namePattern = Pattern.compile("^[a-zA-Z]+(\\s[a-zA-Z]+)?$");        do {            System.out.print(prompt);            enter = scanName.nextLine().trim();            if (!namePattern.matcher(enter).matches()) {                System.out.println("Invalid input. Please enter again!!! ");            }        } while (!namePattern.matcher(enter).matches());        return enter;    }    private static double checkDoubleInput(String prompt) {        Scanner scanDouble = new Scanner(System.in);        double enter;        do {            System.out.print(prompt);            while (!scanDouble.hasNextDouble()) {                System.out.println("Invalid enter. Please enter again!!!");                System.out.print(prompt);                scanDouble.next();            }            enter = scanDouble.nextDouble();            if (enter < 0) {                System.out.println("Invalid enter. Please enter a positive double.");            }        } while (enter < 0);        return enter;    }    private static int checkIntInput(String prompt) {        Scanner scanInt = new Scanner(System.in);        int enter;        do {            System.out.print(prompt);            while (!scanInt.hasNextInt()) {                System.out.println("Invalid enter. Please enter again!!!");                System.out.print(prompt);                scanInt.next();            }            enter = scanInt.nextInt();            if (enter < 0) {                System.out.println("Invalid enter. Please enter a positive double.");            }        } while (enter < 0);        return enter;    }    public void displayProductList(List<Product> productList) {        CellStyle centerdb= new CellStyle(CellStyle.HorizontalAlign.center);        Table table= new Table(5, BorderStyle.UNICODE_BOX_DOUBLE_BORDER_WIDE, ShownBorders.ALL);        table.setColumnWidth(0,10,15);        table.setColumnWidth(1,20,15);        table.setColumnWidth(2,20,15);        table.setColumnWidth(3,20,15);        table.setColumnWidth(4,20,15);        table.addCell("Product List",centerdb,5);        table.addCell("ID",centerdb);        table.addCell("Name",centerdb);        table.addCell("Unit_Price",centerdb);        table.addCell("Qty",centerdb);        table.addCell("Imported Date",centerdb);        productList.stream().forEach(display -> {            table.addCell(" "+display.getId(),centerdb);            table.addCell(" "+display.getName(),centerdb);            table.addCell(" "+display.getUnitPrice(),centerdb);            table.addCell(" "+display.getStockQuantity(),centerdb);            table.addCell(""+display.getImportedDate(),centerdb);        });        System.out.println(table.render());    }    public void displayUnsavedProducts(List<Product> unsavedProducts) {        if (unsavedProducts.isEmpty()) {            System.out.println("No unsaved products.");        } else {            System.out.println("Unsaved Products:");            for (Product product : unsavedProducts) {                displayProduct(product);            }        }    }    public Product getUnsavedProductFromUser() {        System.out.println("Enter Product Details:");        System.out.print("Name: ");        String name = scanner.nextLine();        System.out.print("Unit Price: ");        double unitPrice = scanner.nextDouble();        System.out.print("Stock Quantity: ");        int stockQuantity = scanner.nextInt();        String dateString = scanner.nextLine();        Date importedDate = parseDate(dateString);        return new Product(name, unitPrice, stockQuantity, importedDate);    }//    public Product getProductDetailsFromUser() {//       System.out.println("Enter Product Details: ");//        String name = checkName("Enter name: ");////        double unitPrice = checkDoubleInput("Unit Price: ");////        int stockQuantity = checkIntInput("Stock Quantity: ");////        System.out.print("Imported Date (yyyy-MM-dd): ");//        String dateString = scanner.nextLine();//        Date importedDate = parseDate(dateString);//        return new ProductDTO(name, unitPrice, stockQuantity, importedDate);//    }    public int getProductIDFromUser() {        return checkIntInput("Enter Product ID: ");    }    public Product getUpdatedProductDetails(Product existingProduct) {        System.out.println("Enter Updated Product Details:");        //name        String name = checkName("Name [" + existingProduct.getName() + "]: ");        if (name.isEmpty()) {            name = existingProduct.getName();        }//        scanner.nextLine();        //unit product//        System.out.print("Unit Price [" + existingProduct.getUnitPrice() + "]: ");        String unitPriceInput = String.valueOf(checkDoubleInput("Unit Price [" + existingProduct.getUnitPrice() + "]: "));        double unitPrice = unitPriceInput.isEmpty() ? existingProduct.getUnitPrice() : Double.parseDouble(unitPriceInput);        //stock quantity//        System.out.print("Stock Quantity [" + existingProduct.getStockQuantity() + "]: ");        String stockQuantityInput = String.valueOf(checkIntInput("Stock Quantity [" + existingProduct.getStockQuantity() + "]: "));        int stockQuantity = stockQuantityInput.isEmpty() ? existingProduct.getStockQuantity() : Integer.parseInt(stockQuantityInput);        //date        System.out.print("Imported Date (yyyy-MM-dd) [" + formatDate(existingProduct.getImportedDate()) + "]: ");        String dateString = scanner.nextLine();        Date importedDate = dateString.isEmpty() ? existingProduct.getImportedDate() : parseDate(dateString);        return new Product(name, unitPrice, stockQuantity, importedDate);    }    public List<Product> searchProductsByName(List<Product> productList, String name) {        return productList.stream()                .filter(product -> product.getName().toLowerCase().contains(name.toLowerCase()))                .collect(Collectors.toList());    }//    public List<ProductDTO> getProductNameSearch(List<ProductDTO> productList) {//        System.out.print("Enter Product Name for Search: ");//        String name = scanner.nextLine();//        List<ProductDTO> matchingProducts = searchProductsByName(productList, name);//        return matchingProducts;//    }    public int getRowsPerPageFromUser() {        System.out.print("Enter Number of Rows Per Page: ");        return scanner.nextInt();    }    public int getPageNumberFromUser() {        System.out.print("Enter Target Page Number: ");        return scanner.nextInt();    }    public void displayProduct(Product product) {        if (product != null) {            CellStyle centerdb= new CellStyle(CellStyle.HorizontalAlign.center);            Table table= new Table(1, BorderStyle.UNICODE_BOX);            table.setColumnWidth(0,60,10);            table.addCell("Product Details",centerdb);            table.addCell("ID: " + product.getId());            table.addCell("Name: " + product.getName());            table.addCell("Unit Price: " + product.getUnitPrice());            table.addCell("Stock Quantity: " + product.getStockQuantity());            table.addCell("Imported Date: " + formatDate(product.getImportedDate()));            System.out.println(table.render());        } else {            System.out.println("Product not found!");        }        System.out.println("-------------------------->Press Enter to Continue");        scanner.nextLine();    }    public void displayProductDelete(List<Product> productList){        if(productList ==null){            CellStyle centerdb= new CellStyle(CellStyle.HorizontalAlign.center);            Table table= new Table(5, BorderStyle.UNICODE_BOX_DOUBLE_BORDER_WIDE, ShownBorders.ALL);            table.setColumnWidth(0,10,15);            table.setColumnWidth(1,20,15);            table.setColumnWidth(2,20,15);            table.setColumnWidth(3,20,15);            table.setColumnWidth(4,20,15);            table.addCell("Product List",centerdb,5);            table.addCell("ID",centerdb);            table.addCell("Name",centerdb);            table.addCell("Unit_Price",centerdb);            table.addCell("Qty",centerdb);            table.addCell("Imported Date",centerdb);            productList.stream().forEach(display -> {                table.addCell(" "+display.getId(),centerdb);                table.addCell(" "+display.getName(),centerdb);                table.addCell(" "+display.getUnitPrice(),centerdb);                table.addCell(" "+display.getStockQuantity(),centerdb);                table.addCell(""+display.getImportedDate(),centerdb);            });            System.out.println(table.render());        }    }    public void helpDisplay(){        Table helpTable = new Table(1,BorderStyle.CLASSIC_COMPATIBLE_LIGHT_WIDE,ShownBorders.SURROUND);        helpTable.addCell(" 1.  Press    * : Display All Records Of Products                        ");        helpTable.addCell(" 2.  Press    w : Add New Product                                        ");        helpTable.addCell("     Press    w ‚ü∂#proname-unitprice-qty : shortcut for add new product   ");        helpTable.addCell(" 3.  Press    r : Read product detail                                    ");        helpTable.addCell("     Press    r ‚ü∂#proId : shortcut for read product by Id                ");        helpTable.addCell(" 4.  Press    u : Update Data                                            ");        helpTable.addCell(" 5.  Press    d : Delete Data                                            ");        helpTable.addCell("     Press    d ‚ü∂#proId : shortcut for delete product by Id              ");        helpTable.addCell(" 6.  Press    1 : Display First Page                                     ");        helpTable.addCell(" 7.  Press    2 : Display Next Page                                      ");        helpTable.addCell(" 8.  Press    3 : Display Previous Page                                  ");        helpTable.addCell(" 9.  Press    4 : Display Last Page                                      ");        helpTable.addCell(" 9.  Press    5 : Goto  Page                                             ");        helpTable.addCell(" 9.  Press    4 : Display Last Page                                      ");        helpTable.addCell(" 10. Press    s : Search Products By Name                                ");        helpTable.addCell(" 11. Press    h : Help                                                   ");        helpTable.addCell(" 12. Press    e : Exit                                                   ");        System.out.println(helpTable.render());    }    private Date parseDate(String dateString) {        try {            return new SimpleDateFormat("yyyy-MM-dd").parse(dateString);        } catch (ParseException e) {            System.out.println("Invalid date format. Using current date.");            return new Date();        }    }    private String formatDate(Date date) {        return new SimpleDateFormat("yyyy-MM-dd").format(date);    }//    public String getUserInput() {//        return scanner.nextLine().trim();//    }}